// Copyright 2006-2010, Cypress Semiconductor Corporation.
//
// This software is owned by Cypress Semiconductor Corporation (Cypress)
// and is protected by and subject to worldwide patent protection (United
// States and foreign), United States copyright laws and international
// treaty provisions. Cypress hereby grants to licensee a personal,
// non-exclusive, non-transferable license to copy, use, modify, create
// derivative works of, and compile the Cypress Source Code and derivative
// works for the sole purpose of creating custom software in support of
// licensee product to be used only in conjunction with a Cypress integrated
// circuit as specified in the applicable agreement. Any reproduction,
// modification, translation, compilation, or representation of this
// software except as specified above is prohibited without the express
// written permission of Cypress.
//
// Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND,EXPRESS OR IMPLIED,
// WITH REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
// Cypress reserves the right to make changes without further notice to the
// materials described herein. Cypress does not assume any liability arising
// out of the application or use of any product or circuit described herein.
// Cypress does not authorize its products for use as critical components in
// life-support systems where a malfunction or failure may reasonably be
// expected to result in significant injury to the user. The inclusion of
// Cypress product in a life-support systems application implies that the
// manufacturer assumes all risk of such use and in doing so indemnifies
// Cypress against all charges.
//
// Use may be limited by and subject to the applicable Cypress software
// license agreement.
//
//-----------------------------------------------------------------------------
#ifndef INC_ISSP_VECTORS
#define INC_ISSP_VECTORS

// --------------------------- Specialized PSoC Vectors------------------------
// These Vectors will be altered by code, depending on selected device
const unsigned int num_bits_checksum = 286;
unsigned char checksum_v[] =
{
  0xDE, 0xE0, 0x1F, 0x7B, 0x00, 0x79, 0xF0, 0x75,
  0xE7, 0xC8, 0x1F, 0xDE, 0xA0, 0x1F, 0x7A, 0x01,
  0xF9, 0xF7, 0x01, 0xF7, 0xC9, 0x87, 0xDF, 0x48,
  0x1E, 0x7D, 0x00, 0x7D, 0xE0, 0x0F, 0xF7, 0xC0,
  0x07, 0xDF, 0xE2, 0x5C
};

const unsigned int num_bits_program_block = 308;
unsigned char program_block[] =
{
  0x9F, 0x8A, 0x9E, 0x7F, 0x2B, 0x7D, 0xEE, 0x01,
  0xF7, 0xB0, 0x07, 0x9F, 0x07, 0x5E, 0x7C, 0x81,
  0xFD, 0xEA, 0x01, 0xF7, 0xA0, 0x1F, 0x9F, 0x70,
  0x1F, 0x7C, 0x98, 0x7D, 0xF4, 0x81, 0xF7, 0x80,
  0x17, 0xDF, 0x00, 0x1F, 0x7F, 0x89, 0x70
};

// ----------------------------- General PSoC Vectors--------------------------
const unsigned int num_bits_init0 = 132;
const unsigned char init0_v[] =
{
  0xCA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00
};

const unsigned int num_bits_init1 = 264;
const unsigned char init1_v[] =
{
  0xDE, 0xE0, 0x1F, 0x7B, 0x00, 0x79, 0xF0, 0x75,
  0xE7, 0xC8, 0x1F, 0xDE, 0xA0, 0x1F, 0x7A, 0x01,
  0xF9, 0xF7, 0x01, 0xF7, 0xC9, 0x87, 0xDF, 0x48,
  0x1F, 0x78, 0x04, 0xFD, 0xF0, 0x01, 0xF7, 0xF8,
  0x97
};

const unsigned int num_bits_init2 = 288;
const unsigned char init2_v[] =
{
  0xDE, 0xE0, 0x1F, 0x7B, 0x00, 0x79, 0xF0, 0x75,
  0xE7, 0xC8, 0x1F, 0xDE, 0xA0, 0x1F, 0x7A, 0x01,
  0xF9, 0xF7, 0x01, 0xF7, 0xC9, 0x87, 0xDF, 0x48,
  0x1E, 0x7D, 0x00, 0xFD, 0xE0, 0x0D, 0xF7, 0xC0,
  0x07, 0xDF, 0xE2, 0x5C
};

const unsigned int num_bits_init3_5v = 836;
const unsigned char init3_5v[] =
{
  0xDE, 0xE0, 0x1F, 0x7A, 0x01, 0xFD, 0xEA, 0x01,
  0xF7, 0xB0, 0x47, 0xDF, 0x0A, 0x3F, 0x7C, 0xFE,
  0x7D, 0xF4, 0x61, 0xF7, 0xF8, 0x97, 0x00, 0x00,
  0x03, 0x7B, 0x80, 0x7D, 0xE8, 0x07, 0xF7, 0xA8,
  0x07, 0xDE, 0xC1, 0x1F, 0x7C, 0x30, 0x7D, 0xF3,
  0xD5, 0xF7, 0xD1, 0x87, 0xDE, 0xE2, 0x1F, 0x7F,
  0x89, 0x70, 0x00, 0x00, 0x37, 0xB8, 0x07, 0xDE,
  0x80, 0x7F, 0x7A, 0x80, 0x7D, 0xEC, 0x11, 0xF7,
  0xC2, 0x8F, 0xDF, 0x3F, 0xBF, 0x7D, 0x18, 0x7D,
  0xFE, 0x25, 0xC0, 0x00, 0x00, 0xDE, 0xE0, 0x1F,
  0x7A, 0x01, 0xFD, 0xEA, 0x01, 0xF7, 0xB0, 0x47,
  0xDF, 0x0C, 0x1F, 0x7C, 0xF4, 0x7D, 0xF4, 0x61,
  0xF7, 0xB8, 0x87, 0xDF, 0xE2, 0x5C, 0x00, 0x00,
  0x00
};

const unsigned int num_bits_init3_3v = 840;
const unsigned char init3_3v[] =
{
  0xDE, 0xE0, 0x1F, 0x7A, 0x01, 0xFD, 0xEA, 0x01,
  0xF7, 0xB0, 0x47, 0xDF, 0x0A, 0x3F, 0x7C, 0xFC,
  0x7D, 0xF4, 0x61, 0xF7, 0xF8, 0x97, 0x00, 0x00,
  0x03, 0x7B, 0x80, 0x7D, 0xE8, 0x07, 0xF7, 0xA8,
  0x07, 0xDE, 0xC1, 0x1F, 0x7C, 0x30, 0x7D, 0xF3,
  0xD5, 0xF7, 0xD1, 0x87, 0xDE, 0xE2, 0x1F, 0x7F,
  0x89, 0x70, 0x00, 0x00, 0x37, 0xB8, 0x07, 0xDE,
  0x80, 0x7F, 0x7A, 0x80, 0x7D, 0xEC, 0x11, 0xF7,
  0xC2, 0x8F, 0xDF, 0x3F, 0x3F, 0x7D, 0x18, 0x7D,
  0xFE, 0x25, 0xC0, 0x00, 0x00, 0xDE, 0xE0, 0x1F,
  0x7A, 0x01, 0xFD, 0xEA, 0x01, 0xF7, 0xB0, 0x47,
  0xDF, 0x0C, 0x1F, 0x7C, 0xF4, 0x7D, 0xF4, 0x61,
  0xF7, 0xB8, 0x87, 0xDF, 0xE2, 0x5C, 0x00, 0x00,
  0x00
};

const unsigned int num_bits_id_setup = 330;
const unsigned char id_setup_v[] =
{
  0xDE, 0xE2, 0x1F, 0x70, 0x01, 0x7D, 0xEE, 0x01,
  0xF7, 0xB0, 0x07, 0x9F, 0x07, 0x5E, 0x7C, 0x81,
  0xFD, 0xEA, 0x01, 0xF7, 0xA0, 0x1F, 0x9F, 0x70,
  0x1F, 0x7C, 0x98, 0x7D, 0xF4, 0x81, 0xE7, 0xD0,
  0x07, 0xDE, 0x00, 0xDF, 0x7C, 0x00, 0x7D, 0xFE,
  0x25, 0xC0
};

const unsigned int num_bits_erase_all = 308;
const unsigned char erase_all_v[] =
{
  0x9F, 0x82, 0xBE, 0x7F, 0x2B, 0x7D, 0xEE, 0x01,
  0xF7, 0xB0, 0x07, 0x9F, 0x07, 0x5E, 0x7C, 0x81,
  0xFD, 0xEA, 0x01, 0xF7, 0xA0, 0x1F, 0x9F, 0x70,
  0x1F, 0x7C, 0x98, 0x7D, 0xF4, 0x81, 0xF7, 0x80,
  0x2F, 0xDF, 0x00, 0x1F, 0x7F, 0x89, 0x70
};

const unsigned char read_id_v[] =
{
  0xBF, 0x00, 0xDF, 0x90, 0x00
};

const unsigned char write_byte_start = 0x90;
const unsigned char write_byte_end = 0xE0;

const unsigned char set_block_number[] = {0x9F, 0x40, 0xE0};
const unsigned char set_block_number_end = 0xE0;

const unsigned char set_bank_number[] = {0xDE, 0xE2, 0x1F, 0x7D, 0x00};
const unsigned char set_bank_number_end[] = {0xFB, 0xDC, 0x03, 0x80};

const unsigned char num_bits_wait_and_poll_end = 40;
const unsigned char wait_and_poll_end[] =
{
  0x00, 0x00, 0x00, 0x00, 0x00
};    // forty '0's per the spec

const unsigned char read_checksum_v[] =
{
  0xBF, 0x20, 0xDF, 0x80, 0x80
};

const unsigned char read_byte_v[] =
{
  0xB0, 0x80
};

const unsigned char read_reg_v[] =
{
  0xE0, 0x80
};

const unsigned char write_reg_v[] =
{
  0xC0, 0xE0
};

const unsigned int num_bits_verify_setup = 264;
const unsigned char verify_setup_v[] =
{
  0xDE, 0xE0, 0x1F, 0x7B, 0x00, 0x79, 0xF0, 0x75,
  0xE7, 0xC8, 0x1F, 0xDE, 0xA0, 0x1F, 0x7A, 0x01,
  0xF9, 0xF7, 0x01, 0xF7, 0xC9, 0x87, 0xDF, 0x48,
  0x1F, 0x78, 0x00, 0xFD, 0xF0, 0x01, 0xF7, 0xF8,
  0x97
};

const unsigned int num_bits_security = 308;
const unsigned char security_v[] =
{
  0x9F, 0x8A, 0x9E, 0x7F, 0x2B, 0x7D, 0xEE, 0x01,
  0xF7, 0xB0, 0x07, 0x9F, 0x07, 0x5E, 0x7C, 0x81,
  0xFD, 0xEA, 0x01, 0xF7, 0xA0, 0x1F, 0x9F, 0x70,
  0x1F, 0x7C, 0x98, 0x7D, 0xF4, 0x81, 0xF7, 0x80,
  0x27, 0xDF, 0x00, 0x1F, 0x7F, 0x89, 0x70
};

const unsigned  int num_bits_securityVerification = 308;
const unsigned char securityVerification_v[] =
{
    0xDE,0xE0,0x1F,0x7B,0x00,0x79,0xF0,0x75,0xE7,0xC8,0x1F,
    0x9F,0xA0,0x1E,0x7F,0x80,0x7D,0xEA,0x01,0xF7,0xA0,0x1F,
    0x9F,0x70,0x1F,0x7C,0x98,0x7D,0xF4,0x81,0xF7,0x80,0x87,
    0xDF,0x0,0x1F,0x7F,0x89,0x70

//		0b11011110, 0b11100000, 0b00011111, 0b01111011, 0b00000000, 0b01111001, 0b11110000, 0b01110101,
//		0b11100111, 0b11001000, 0b00011111, 0b10011111, 0b10100000, 0b00011110, 0b01111111, 0b10000000,
//		0b01111101, 0b11101010, 0b00000001, 0b11110111, 0b10100000, 0b00011111, 0b10011111, 0b01110000,
//		0b00011111, 0b01111100, 0b10011000, 0b01111101, 0b11110100, 0b10000001, 0b11110111, 0b10000000,
//		0b10000111, 0b11011111, 0b00000000, 0b00011111, 0b01111111, 0b10001001, 0b01110000		
};
#endif  //(INC_ISSP_VECTORS)

